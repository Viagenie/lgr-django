ServerSignature Off
ServerTokens Prod
Protocols h2 http/1.1

# if you listen on 80, mindful of healthchecks, redirect everything...
<VirtualHost _default_:80>
    #Redirect permanent / https://lgrtool.example.com/
    FallbackResource /index.html
</VirtualHost>

<VirtualHost _default_:443>
  # this is lgrtool, gunicorn serving Django
  ServerName lgrtool.example.com

  SSLEngine on
  RequestHeader set X-Forwarded-Proto "https"
  SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
  SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
  # in 2.4.30 and above, replace the preceding two lines with
  #SSLPolicy modern

  SSLCertificateFile /etc/pki/tls/certs/localhost-ec384.crt
  SSLCertificateKeyFile /etc/pki/tls/private/localhost-ec384.key
  SSLCertificateFile /etc/pki/tls/certs/localhost.crt
  SSLCertificateKeyFile /etc/pki/tls/private/localhost.key

  # if you have a real certificate...
  #SSLUseStapling on
  #SSLStaplingCache "shmcb:logs/stapling-cache(150000)"

  SSLCompression off
  SSLSessionTickets Off

  # enable this block with the command argument -D...
  <IfDefine HOSTHEADERWHITELIST>
    # first we can define a set of valid host headers
    SetEnvIfExpr "req_novary('Host') in { 'lgrtool.example.com', \
        'lgrtool-dev.example.com', 'xn--rgbk9c.xn--mgbbh2a9fub.xn--ngbc5azd' }" \
        lgrtool_positive_host_header

    # if we did not get a match above, redirect the request.
    <If "env('lgrtool_positive_host_header') -ne 1">
      Redirect permanent / https://lgrtool.example.com
    </If>
  </IfDefine>

  # most methods not spoken by this server
  <Location "/">
    AllowMethods GET HEAD POST
    Require all granted
  </Location>

  # hits to the root get a redirect
  RedirectMatch 307 ^/$ /lgr/

  #<Location "/authenticated">
  #  AuthType Basic
  #  AuthName "Password Demonstration"
  #  AuthUserFile /etc/httpd/lgrtool.htpasswd
  #  Require valid-user
  #</Location>

  # this is a catch-all that shouldn't appear
  ExpiresActive on
  ExpiresDefault "access plus 60 seconds"

  # static public files are our root for non-proxied content
  Alias /static /var/www/lgr/lgr-django/src/lgr_web/static
  Alias /doc /var/www/lgr/lgr-django/doc/_build/html
 
  # all options off and all access allowed
  <Directory /var/www/lgr/lgr-django/src/lgr_web/static>
    Options None
    AllowOverride None
    Require all granted
    AddOutputFilter DEFLATE js css
  </Directory>

  <Directory /var/www/lgr/lgr-django/doc/_build/html>
    Options None
    AllowOverride None
    Require all granted
    AddOutputFilter DEFLATE js css
  </Directory>

  # despite forcing the prefix of /lgr in local.py this path doesn't get one
  <Location "/static">
    # provide a default expiration time
    ExpiresActive on
    ExpiresDefault "access plus 30 days"
    ExpiresByType image/png "access plus 42 days"
  </Location>

  # ensure error pages work
  <Location "/error">
    Require all granted
  </Location>

  # we explicitly set the server header to not leak the app server
  Header set Server "Apache"
  # this application will not work without TLS
  Header set Strict-Transport-Security "max-age=777000; preload"

  # header from variable for Kubernetes we have defined in the k8s-yaml
  PassEnv META_K8S_NAMESPACE
  PassEnv META_K8S_NAME
  <If "-n env('META_K8S_NAME')">
    Header set X-k8s-pod "%{META_K8S_NAME}e"
    Header set X-k8s-namespace "%{META_K8S_NAMESPACE}e"
  </If>

  Redirect permanent /lgr /lgr/

  <Proxy /lgr>
    Require all granted
  </Proxy>

  # doesn't really matter if you have a host header whitelist
  ProxyPreserveHost on

  # https://httpd.apache.org/docs/current/mod/mod_proxy.html
  # == "Exclusions must come before the general ProxyPass directives." ==
  # == "The first rule that matches wins." ==

  # always let server error pages get served
  ProxyPass /error !

  # paths and files you might exclude if you were proxying at the root directory
  #ProxyPass /doc !
  #ProxyPass /static !
  #ProxyPass /robots.txt !
  #ProxyPass /favicon.ico !
  #ProxyPass /apple-touch-icon.png !

  # trailing slash here
  ProxyPass /lgr/ http://localhost:5000/ connectiontimeout=3 timeout=13
  # but no trailing slash here.
  ProxyPassReverse /lgr http://localhost:5000

</VirtualHost>

RemoteIPHeader X-Forwarded-For
# https://cloud.google.com/compute/docs/load-balancing/http/
RemoteIPInternalProxy 130.211.0.0/22
RemoteIPInternalProxy 35.191.0.0/16
